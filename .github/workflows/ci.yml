name: Smart DJ CI/CD

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  # Test and build all packages
  test-and-build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install package dependencies
      run: |
        cd shared && npm ci
        cd ../backend && npm ci
        cd ../frontend && npm ci
        cd ../mobile && npm ci
        
    - name: Lint code
      run: npm run lint
      continue-on-error: true
      
    - name: Run tests
      run: npm test
      continue-on-error: true
      
    - name: Build shared package
      run: cd shared && npm run build
      
    - name: Build backend
      run: cd backend && npm run build
      continue-on-error: true
      
    - name: Build frontend
      run: cd frontend && npm run build
      continue-on-error: true

  # Security audit
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

  # Type checking
  type-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install package dependencies
      run: |
        cd shared && npm ci
        cd ../backend && npm ci
        cd ../frontend && npm ci
        
    - name: Type check shared
      run: cd shared && npx tsc --noEmit
      continue-on-error: true
      
    - name: Type check backend
      run: cd backend && npx tsc --noEmit
      continue-on-error: true
      
    - name: Type check frontend
      run: cd frontend && npx tsc --noEmit
      continue-on-error: true

  # Docker build test
  docker-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Test Docker Compose build
      run: docker-compose -f docker-compose.yml build --no-cache
      continue-on-error: true

  # Mobile build check (Expo)
  mobile-build-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install Expo CLI
      run: npm install -g @expo/cli
      
    - name: Install mobile dependencies
      run: cd mobile && npm ci
      
    - name: Expo Doctor
      run: cd mobile && npx expo doctor
      continue-on-error: true

  # Deployment (only on master push)
  deploy:
    needs: [test-and-build, security-audit, type-check]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deployment placeholder
      run: |
        echo "ðŸš€ Deployment would happen here"
        echo "This is where you'd deploy to your hosting platform"
        echo "Examples: Vercel, Netlify, AWS, Digital Ocean, etc."